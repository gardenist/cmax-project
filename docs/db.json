{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1573981103410},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1573981103410},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1573981103410},{"_id":"themes/landscape/README.md","hash":"f0158173e89ba174699e040e2b18566db55b96f6","modified":1573985545852},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1573981103410},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1573981103411},{"_id":"source/_drafts/Javascript-호환성.md","hash":"f3d56c71497c84b853cbd285a70bd393e1e4af0b","modified":1574082221454},{"_id":"source/_posts/Javascript-툴.md","hash":"c0379af0294b51c26b022d13e565969cc5d29d83","modified":1574083807802},{"_id":"source/_posts/20191117-로그인-기능.md","hash":"2a2c37f60acf08503648f3d228cc033639c9be2e","modified":1573998529484},{"_id":"source/_drafts/자바스크립트-모듈.md","hash":"ff1dbf82da8c962718e66f851157bcfd8990bc3e","modified":1574082333024},{"_id":"source/_posts/Hexo-설치하기.md","hash":"1c6134da1f529fd5450b82e15502c562519fff8b","modified":1573984889358},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1573981103409},{"_id":"source/_posts/Node로-로컬-서버-실행하기.md","hash":"7b08d98f1e8644f53a5e25eaba0a9764b9ab593d","modified":1573984884357},{"_id":"source/_posts/Node-설치하기.md","hash":"6bc28e3be271ba18ec7c43ece9c21e965034b0d4","modified":1573984867656},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1573981103417},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1573981103418},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1573981103418},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1573981103418},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1573981103418},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1573981103418},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1573981103419},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1573981103419},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1573981103419},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1573981103419},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1573981103419},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573981103419},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1573981103420},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1573981103419},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1573981103419},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1573981103437},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1573981103438},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1573981103439},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1573981103439},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1573981103439},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1573981103439},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1573981103439},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1573981103440},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1573981103440},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1573981103439},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1573981103443},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1573981103437},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1573981103443},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1573981103444},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1573981103444},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1573981103450},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1573981103450},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1573981103450},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1573981103453},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1573981103453},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1573981103453},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1573981103453},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1573981103453},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1573981103454},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1573981103454},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1573981103454},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1573981103454},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1573981103450},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1573981103471},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1573981103472},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1573981103472},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1573981103472},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1573981103472},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1573981103472},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1573981103476},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1573981103477},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1573981103477},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1573981103477},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1573981103477},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1573981103477},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1573981103478},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1573981103477},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1573981103476},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1573981103477},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1573981103477},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1573981103477},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1573981103477},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1573981103476},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1573981103476},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1573981103477},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1573981103477},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1573981103477},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1573981103477},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1573981103477},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1573981103477},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1573981103479},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1573981103481},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1573981103481},{"_id":"public/2019/11/17/20191117-로그인-기능/index.html","hash":"7d5c9841e9005a3835f809b5bd55393c249c678e","modified":1574083811194},{"_id":"public/2019/11/17/Node-설치하기/index.html","hash":"94c71ead333bc0fdbea1bc8f326fae6df2bef59d","modified":1574083811194},{"_id":"public/2019/11/17/Node로-로컬-서버-실행하기/index.html","hash":"cee2a1307511ffb5da156b3647756a66abb9b640","modified":1574083811204},{"_id":"public/2019/11/17/Hexo-설치하기/index.html","hash":"49688fb9aa87070804db0f9fec45658aaae09d19","modified":1574083811205},{"_id":"public/2019/11/17/hello-world/index.html","hash":"34b80e4ea73732bc0dac4a1a641ae592e2a62050","modified":1574083811205},{"_id":"public/archives/index.html","hash":"a1b676bfa48746048a5b626253724bd4ce1f1ad1","modified":1574083811205},{"_id":"public/archives/2019/index.html","hash":"136fbce04bbaa5912690662e5f80634a1853cce8","modified":1574083811205},{"_id":"public/archives/2019/11/index.html","hash":"227ab09d8d80f5bfdef678e0358fef696046b9d4","modified":1574083811205},{"_id":"public/categories/Javascript/index.html","hash":"9e60de03bd100025f9b4f7d5a935668d36ad7ac5","modified":1574083811206},{"_id":"public/categories/CMAX-Proejct/index.html","hash":"ec88a76a280cc259a28e48fa4b1b35697a149a03","modified":1574083811206},{"_id":"public/categories/Hexo/index.html","hash":"7f4fd3e845031845a12663b0823b5f0f4757113d","modified":1574083811206},{"_id":"public/categories/CMAX-Proejct/Homeworks/index.html","hash":"953f908a8a01cc27b5cc23066a9afd183ea9f45a","modified":1574083811206},{"_id":"public/categories/Javascript/Node-js/index.html","hash":"a710c164f10f2760c37165ee3287bca42454a40d","modified":1574083811206},{"_id":"public/index.html","hash":"c026dad451147b7f36fc87e1140924061af8869e","modified":1574083811207},{"_id":"public/2019/11/18/Javascript-툴/index.html","hash":"99dd7ab201037324f28f825d031053ff9b69e722","modified":1574083811210},{"_id":"public/categories/Javascript/Tool/index.html","hash":"d79742b61adca40c4acc85de0c67a011d40eb806","modified":1574083811210},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1574083811213},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1574083811213},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1574083811213},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1574083811213},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1574083811213},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1574083811213},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1574083811213},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1574083811213},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1574083811214},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1574083811214},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1574083811852},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1574083811890},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1574083811890},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1574083811890},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1574083811890},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1574083811890},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1574083811891},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1574083811891},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1574083811891},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1574083811891},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1574083811891},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1574083811893},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1574083811893}],"Category":[{"name":"Javascript","_id":"ck34guxiq00024359m7g2b2u2"},{"name":"CMAX Proejct","_id":"ck34guxix000643596tnyweyb"},{"name":"Tool","parent":"ck34guxiq00024359m7g2b2u2","_id":"ck34guxj200094359h7xrfr43"},{"name":"Hexo","_id":"ck34guxj5000b4359niuyhcit"},{"name":"Homeworks","parent":"ck34guxix000643596tnyweyb","_id":"ck34guxj6000d4359mwlpm6e9"},{"name":"Node.js","parent":"ck34guxiq00024359m7g2b2u2","_id":"ck34guxj7000g4359txhq3cs3"}],"Data":[],"Page":[],"Post":[{"title":"Javascript 툴","date":"2019-11-18T12:56:04.000Z","_content":"# Package Manager(Dependency Manager)\n패키지 매니저는 자바스크립트 개발 시 필요한 모듈(라이브러리/프레임워크 등)을 저장소(Repository)에서 관리하고, 이를 이름과 버전으로 다운로드하여 사용할 수 있는 도구입니다. 예를 들어 jquery가 필요하다면, jquery.com이 아니라 패키지 매니저를 통해 다운로드할 수 있습니다.\n또한 아래에 설명하는 번들러, 트랜스파일러 등을 패키지 매니저를 통해 설치하여 사용할 수도 있습니다.\n- npm(Node Package Manager)\n- bower\n- yarn\n\n# Module Bundler\n번들러는 모듈로 나뉘어진 코드를 하나 또는 여러개의 파일로 묶어주는(Bundling) 도구이며, CommonJS나 ES6 모듈로 작성된 코드는 브라우저에서 바로 실행할 수 없으므로,\n이를 브라우저에서 사용할 수 있도록 변환하여 번들링하는 역할을 합니다.\n- webpack\n- RequireJS\n- Browserify\n- Rollup\n- Parcel\n\n# Javascript Transpiler\nCompiler는 소스코드로부터 실행 가능한 바이너리로 변환하는 역할을 합니다. 이와 유사하지만 트랜스파일러는 소스코드로부터 다른 형태의 소스코드로 변환하는 일을 합니다.\nbabel이라는 트랜스파일러를 사용하면 ES6 버전의 문법으로 작성한 자바스크립트 파일을 브라우저 호환성을 위해 ES5 버전의 문법으로 변환할 수 있습니다.\n- babel\n- typescript\n- coffeescript\n\n# Task Runner\n태스크 러너는 애플리케이션 개발, 실행, 테스트 등 반복되는 작업(Task)을 스크립트로 작성하여 자동화할 수 있는 도구입니다.\n- grunt\n- gulp\n- webpack: 웹팩은 훌륭한 모듈 번들러이면서 태스크러너의 역할을 할 수도 있습니다.\n\n# 자바스크립트 모듈\n모듈이란 자바스크립트로 작성된 함수의 덩어리로 생각할 수 있습니다. 웹 브라우저 기반 자바스크립트에서는 모듈 개념이 없지만 모듈 라이브러리를 이용해 모듈 개념을 사용할 수 있습니다. ES6에 모듈 개념과 문법이 추가되었지만, 모든 브라우저가 ES6 모듈을 지원하지 않으며 사용방법이 다소 상이합니다.\n- 네임스페이스 개념 이해하기\n- CommonJS\n- AMD\n- UMD\n\n### 참고 자료\n- [패키지 매니저, 자동화 도구](https://codeflow.study/courses/88)\n- [믿을만한 자바스크립트 테스트 도구 10가지](http://www.itworld.co.kr/news/128974)\n- [참고 - Toast UI](https://ui.toast.com/fe-guide/ko_BUNDLER/)","source":"_posts/Javascript-툴.md","raw":"---\ntitle: Javascript 툴\ntags:\n  - null\ncategories:\n  - Javascript\n  - Tool\ndate: 2019-11-18 21:56:04\n---\n# Package Manager(Dependency Manager)\n패키지 매니저는 자바스크립트 개발 시 필요한 모듈(라이브러리/프레임워크 등)을 저장소(Repository)에서 관리하고, 이를 이름과 버전으로 다운로드하여 사용할 수 있는 도구입니다. 예를 들어 jquery가 필요하다면, jquery.com이 아니라 패키지 매니저를 통해 다운로드할 수 있습니다.\n또한 아래에 설명하는 번들러, 트랜스파일러 등을 패키지 매니저를 통해 설치하여 사용할 수도 있습니다.\n- npm(Node Package Manager)\n- bower\n- yarn\n\n# Module Bundler\n번들러는 모듈로 나뉘어진 코드를 하나 또는 여러개의 파일로 묶어주는(Bundling) 도구이며, CommonJS나 ES6 모듈로 작성된 코드는 브라우저에서 바로 실행할 수 없으므로,\n이를 브라우저에서 사용할 수 있도록 변환하여 번들링하는 역할을 합니다.\n- webpack\n- RequireJS\n- Browserify\n- Rollup\n- Parcel\n\n# Javascript Transpiler\nCompiler는 소스코드로부터 실행 가능한 바이너리로 변환하는 역할을 합니다. 이와 유사하지만 트랜스파일러는 소스코드로부터 다른 형태의 소스코드로 변환하는 일을 합니다.\nbabel이라는 트랜스파일러를 사용하면 ES6 버전의 문법으로 작성한 자바스크립트 파일을 브라우저 호환성을 위해 ES5 버전의 문법으로 변환할 수 있습니다.\n- babel\n- typescript\n- coffeescript\n\n# Task Runner\n태스크 러너는 애플리케이션 개발, 실행, 테스트 등 반복되는 작업(Task)을 스크립트로 작성하여 자동화할 수 있는 도구입니다.\n- grunt\n- gulp\n- webpack: 웹팩은 훌륭한 모듈 번들러이면서 태스크러너의 역할을 할 수도 있습니다.\n\n# 자바스크립트 모듈\n모듈이란 자바스크립트로 작성된 함수의 덩어리로 생각할 수 있습니다. 웹 브라우저 기반 자바스크립트에서는 모듈 개념이 없지만 모듈 라이브러리를 이용해 모듈 개념을 사용할 수 있습니다. ES6에 모듈 개념과 문법이 추가되었지만, 모든 브라우저가 ES6 모듈을 지원하지 않으며 사용방법이 다소 상이합니다.\n- 네임스페이스 개념 이해하기\n- CommonJS\n- AMD\n- UMD\n\n### 참고 자료\n- [패키지 매니저, 자동화 도구](https://codeflow.study/courses/88)\n- [믿을만한 자바스크립트 테스트 도구 10가지](http://www.itworld.co.kr/news/128974)\n- [참고 - Toast UI](https://ui.toast.com/fe-guide/ko_BUNDLER/)","slug":"Javascript-툴","published":1,"updated":"2019-11-18T13:30:07.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxii000043598ng7eurs","content":"<h1 id=\"Package-Manager-Dependency-Manager\"><a href=\"#Package-Manager-Dependency-Manager\" class=\"headerlink\" title=\"Package Manager(Dependency Manager)\"></a>Package Manager(Dependency Manager)</h1><p>패키지 매니저는 자바스크립트 개발 시 필요한 모듈(라이브러리/프레임워크 등)을 저장소(Repository)에서 관리하고, 이를 이름과 버전으로 다운로드하여 사용할 수 있는 도구입니다. 예를 들어 jquery가 필요하다면, jquery.com이 아니라 패키지 매니저를 통해 다운로드할 수 있습니다.<br>또한 아래에 설명하는 번들러, 트랜스파일러 등을 패키지 매니저를 통해 설치하여 사용할 수도 있습니다.</p>\n<ul>\n<li>npm(Node Package Manager)</li>\n<li>bower</li>\n<li>yarn</li>\n</ul>\n<h1 id=\"Module-Bundler\"><a href=\"#Module-Bundler\" class=\"headerlink\" title=\"Module Bundler\"></a>Module Bundler</h1><p>번들러는 모듈로 나뉘어진 코드를 하나 또는 여러개의 파일로 묶어주는(Bundling) 도구이며, CommonJS나 ES6 모듈로 작성된 코드는 브라우저에서 바로 실행할 수 없으므로,<br>이를 브라우저에서 사용할 수 있도록 변환하여 번들링하는 역할을 합니다.</p>\n<ul>\n<li>webpack</li>\n<li>RequireJS</li>\n<li>Browserify</li>\n<li>Rollup</li>\n<li>Parcel</li>\n</ul>\n<h1 id=\"Javascript-Transpiler\"><a href=\"#Javascript-Transpiler\" class=\"headerlink\" title=\"Javascript Transpiler\"></a>Javascript Transpiler</h1><p>Compiler는 소스코드로부터 실행 가능한 바이너리로 변환하는 역할을 합니다. 이와 유사하지만 트랜스파일러는 소스코드로부터 다른 형태의 소스코드로 변환하는 일을 합니다.<br>babel이라는 트랜스파일러를 사용하면 ES6 버전의 문법으로 작성한 자바스크립트 파일을 브라우저 호환성을 위해 ES5 버전의 문법으로 변환할 수 있습니다.</p>\n<ul>\n<li>babel</li>\n<li>typescript</li>\n<li>coffeescript</li>\n</ul>\n<h1 id=\"Task-Runner\"><a href=\"#Task-Runner\" class=\"headerlink\" title=\"Task Runner\"></a>Task Runner</h1><p>태스크 러너는 애플리케이션 개발, 실행, 테스트 등 반복되는 작업(Task)을 스크립트로 작성하여 자동화할 수 있는 도구입니다.</p>\n<ul>\n<li>grunt</li>\n<li>gulp</li>\n<li>webpack: 웹팩은 훌륭한 모듈 번들러이면서 태스크러너의 역할을 할 수도 있습니다.</li>\n</ul>\n<h1 id=\"자바스크립트-모듈\"><a href=\"#자바스크립트-모듈\" class=\"headerlink\" title=\"자바스크립트 모듈\"></a>자바스크립트 모듈</h1><p>모듈이란 자바스크립트로 작성된 함수의 덩어리로 생각할 수 있습니다. 웹 브라우저 기반 자바스크립트에서는 모듈 개념이 없지만 모듈 라이브러리를 이용해 모듈 개념을 사용할 수 있습니다. ES6에 모듈 개념과 문법이 추가되었지만, 모든 브라우저가 ES6 모듈을 지원하지 않으며 사용방법이 다소 상이합니다.</p>\n<ul>\n<li>네임스페이스 개념 이해하기</li>\n<li>CommonJS</li>\n<li>AMD</li>\n<li>UMD</li>\n</ul>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><ul>\n<li><a href=\"https://codeflow.study/courses/88\" target=\"_blank\" rel=\"noopener\">패키지 매니저, 자동화 도구</a></li>\n<li><a href=\"http://www.itworld.co.kr/news/128974\" target=\"_blank\" rel=\"noopener\">믿을만한 자바스크립트 테스트 도구 10가지</a></li>\n<li><a href=\"https://ui.toast.com/fe-guide/ko_BUNDLER/\" target=\"_blank\" rel=\"noopener\">참고 - Toast UI</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Package-Manager-Dependency-Manager\"><a href=\"#Package-Manager-Dependency-Manager\" class=\"headerlink\" title=\"Package Manager(Dependency Manager)\"></a>Package Manager(Dependency Manager)</h1><p>패키지 매니저는 자바스크립트 개발 시 필요한 모듈(라이브러리/프레임워크 등)을 저장소(Repository)에서 관리하고, 이를 이름과 버전으로 다운로드하여 사용할 수 있는 도구입니다. 예를 들어 jquery가 필요하다면, jquery.com이 아니라 패키지 매니저를 통해 다운로드할 수 있습니다.<br>또한 아래에 설명하는 번들러, 트랜스파일러 등을 패키지 매니저를 통해 설치하여 사용할 수도 있습니다.</p>\n<ul>\n<li>npm(Node Package Manager)</li>\n<li>bower</li>\n<li>yarn</li>\n</ul>\n<h1 id=\"Module-Bundler\"><a href=\"#Module-Bundler\" class=\"headerlink\" title=\"Module Bundler\"></a>Module Bundler</h1><p>번들러는 모듈로 나뉘어진 코드를 하나 또는 여러개의 파일로 묶어주는(Bundling) 도구이며, CommonJS나 ES6 모듈로 작성된 코드는 브라우저에서 바로 실행할 수 없으므로,<br>이를 브라우저에서 사용할 수 있도록 변환하여 번들링하는 역할을 합니다.</p>\n<ul>\n<li>webpack</li>\n<li>RequireJS</li>\n<li>Browserify</li>\n<li>Rollup</li>\n<li>Parcel</li>\n</ul>\n<h1 id=\"Javascript-Transpiler\"><a href=\"#Javascript-Transpiler\" class=\"headerlink\" title=\"Javascript Transpiler\"></a>Javascript Transpiler</h1><p>Compiler는 소스코드로부터 실행 가능한 바이너리로 변환하는 역할을 합니다. 이와 유사하지만 트랜스파일러는 소스코드로부터 다른 형태의 소스코드로 변환하는 일을 합니다.<br>babel이라는 트랜스파일러를 사용하면 ES6 버전의 문법으로 작성한 자바스크립트 파일을 브라우저 호환성을 위해 ES5 버전의 문법으로 변환할 수 있습니다.</p>\n<ul>\n<li>babel</li>\n<li>typescript</li>\n<li>coffeescript</li>\n</ul>\n<h1 id=\"Task-Runner\"><a href=\"#Task-Runner\" class=\"headerlink\" title=\"Task Runner\"></a>Task Runner</h1><p>태스크 러너는 애플리케이션 개발, 실행, 테스트 등 반복되는 작업(Task)을 스크립트로 작성하여 자동화할 수 있는 도구입니다.</p>\n<ul>\n<li>grunt</li>\n<li>gulp</li>\n<li>webpack: 웹팩은 훌륭한 모듈 번들러이면서 태스크러너의 역할을 할 수도 있습니다.</li>\n</ul>\n<h1 id=\"자바스크립트-모듈\"><a href=\"#자바스크립트-모듈\" class=\"headerlink\" title=\"자바스크립트 모듈\"></a>자바스크립트 모듈</h1><p>모듈이란 자바스크립트로 작성된 함수의 덩어리로 생각할 수 있습니다. 웹 브라우저 기반 자바스크립트에서는 모듈 개념이 없지만 모듈 라이브러리를 이용해 모듈 개념을 사용할 수 있습니다. ES6에 모듈 개념과 문법이 추가되었지만, 모든 브라우저가 ES6 모듈을 지원하지 않으며 사용방법이 다소 상이합니다.</p>\n<ul>\n<li>네임스페이스 개념 이해하기</li>\n<li>CommonJS</li>\n<li>AMD</li>\n<li>UMD</li>\n</ul>\n<h3 id=\"참고-자료\"><a href=\"#참고-자료\" class=\"headerlink\" title=\"참고 자료\"></a>참고 자료</h3><ul>\n<li><a href=\"https://codeflow.study/courses/88\" target=\"_blank\" rel=\"noopener\">패키지 매니저, 자동화 도구</a></li>\n<li><a href=\"http://www.itworld.co.kr/news/128974\" target=\"_blank\" rel=\"noopener\">믿을만한 자바스크립트 테스트 도구 10가지</a></li>\n<li><a href=\"https://ui.toast.com/fe-guide/ko_BUNDLER/\" target=\"_blank\" rel=\"noopener\">참고 - Toast UI</a></li>\n</ul>\n"},{"title":"20191117 로그인 기능","date":"2019-11-17T13:29:34.000Z","_content":"오늘 스터디에서는 회원 가입 페이지를 만들고 `user-service.js` 파일 내의 `UserService` 클래스에 `signUp` 함수를 만들어 로컬 스토리지에 회원 정보를 저장하는 것까지 진행했습니다.\n\n회원 가입 후 로그인 페이지로 이동시키기 위해 비어있는 `login.html` 파일을 만들었는데, 아래와 같이 동작하도록 `login.html` 파일과 `user-service.js` 파일을 수정해 봅시다.\n\n## 1. 로그인 페이지와 로그인 기능 만들기\n1. 아이디와 비밀번호를 입력할 수 있는 폼(Form)과 로그인 버튼 작성\n    - sign-up.html 파일을 참고해서 만들어봅시다.\n2. 로그인 버튼을 클릭했을 때 동작하는 이벤트 핸들러를 작성합니다.\n3. `UserService` 클래스에 `login(username, password)` 함수를 추가합니다.\n4. `login` 함수에서 `signUp` 때와 동일한 `key`로 로컬 스토리지에서 사용자가 있는지 조회(`load`)합니다.\n    1. 사용자가 없다면 예외를 발생합니다. ([MDN throw 문서](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw))\n        - userService.login 함수를 호출한 `login.html` 페이지에서 이 예외를 `try-catch` 구문으로 처리할 수 있도록 합니다.\n        - 화면에 메시지로 에러 메시지를 보여주거나, `alert()` 함수를 이용하거나, 자유롭게 편한 방법으로 표현해 주세요.\n    2. 로그인 username input에 입력한 사용자가 있다면 비밀번호가 동일한지 비교합니다.\n        - 비밀번호가 일치하지 않는다면 4.1.과 마찬가지로 예외를 발생시킵니다.\n        - 비밀번호가 일치한다면 게시글 목록 페이지(`post-list.html`)로 이동합니다.\n\n\n## 2. 더 해보고 싶다면\n1. `json-local-storage.js`는 LocalStorage를 사용하는 클래스 `JsonLocalStorage`가 작성되어 있습니다.  \n    SessionStorage를 사용하는 `json-session-storage.js` 파일을 작성해 봅시다.\n2. \"1. 로그인 페이지와 로그인 기능 만들기\"의 4.2.에서 로그인 성공 시 SessionStorage에 로그인 정보(User)를 저장하고,\n    `UserService`의 `getLoggedInUser` 함수를 세션에 저장된 로그인 정보를 가져오도록 수정해 봅시다.","source":"_posts/20191117-로그인-기능.md","raw":"---\ntitle: 20191117 로그인 기능\ntags:\n  - null\ncategories:\n  - CMAX Proejct\n  - Homeworks\ndate: 2019-11-17 22:29:34\n---\n오늘 스터디에서는 회원 가입 페이지를 만들고 `user-service.js` 파일 내의 `UserService` 클래스에 `signUp` 함수를 만들어 로컬 스토리지에 회원 정보를 저장하는 것까지 진행했습니다.\n\n회원 가입 후 로그인 페이지로 이동시키기 위해 비어있는 `login.html` 파일을 만들었는데, 아래와 같이 동작하도록 `login.html` 파일과 `user-service.js` 파일을 수정해 봅시다.\n\n## 1. 로그인 페이지와 로그인 기능 만들기\n1. 아이디와 비밀번호를 입력할 수 있는 폼(Form)과 로그인 버튼 작성\n    - sign-up.html 파일을 참고해서 만들어봅시다.\n2. 로그인 버튼을 클릭했을 때 동작하는 이벤트 핸들러를 작성합니다.\n3. `UserService` 클래스에 `login(username, password)` 함수를 추가합니다.\n4. `login` 함수에서 `signUp` 때와 동일한 `key`로 로컬 스토리지에서 사용자가 있는지 조회(`load`)합니다.\n    1. 사용자가 없다면 예외를 발생합니다. ([MDN throw 문서](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw))\n        - userService.login 함수를 호출한 `login.html` 페이지에서 이 예외를 `try-catch` 구문으로 처리할 수 있도록 합니다.\n        - 화면에 메시지로 에러 메시지를 보여주거나, `alert()` 함수를 이용하거나, 자유롭게 편한 방법으로 표현해 주세요.\n    2. 로그인 username input에 입력한 사용자가 있다면 비밀번호가 동일한지 비교합니다.\n        - 비밀번호가 일치하지 않는다면 4.1.과 마찬가지로 예외를 발생시킵니다.\n        - 비밀번호가 일치한다면 게시글 목록 페이지(`post-list.html`)로 이동합니다.\n\n\n## 2. 더 해보고 싶다면\n1. `json-local-storage.js`는 LocalStorage를 사용하는 클래스 `JsonLocalStorage`가 작성되어 있습니다.  \n    SessionStorage를 사용하는 `json-session-storage.js` 파일을 작성해 봅시다.\n2. \"1. 로그인 페이지와 로그인 기능 만들기\"의 4.2.에서 로그인 성공 시 SessionStorage에 로그인 정보(User)를 저장하고,\n    `UserService`의 `getLoggedInUser` 함수를 세션에 저장된 로그인 정보를 가져오도록 수정해 봅시다.","slug":"20191117-로그인-기능","published":1,"updated":"2019-11-17T13:48:49.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxin00014359y7xl45f1","content":"<p>오늘 스터디에서는 회원 가입 페이지를 만들고 <code>user-service.js</code> 파일 내의 <code>UserService</code> 클래스에 <code>signUp</code> 함수를 만들어 로컬 스토리지에 회원 정보를 저장하는 것까지 진행했습니다.</p>\n<p>회원 가입 후 로그인 페이지로 이동시키기 위해 비어있는 <code>login.html</code> 파일을 만들었는데, 아래와 같이 동작하도록 <code>login.html</code> 파일과 <code>user-service.js</code> 파일을 수정해 봅시다.</p>\n<h2 id=\"1-로그인-페이지와-로그인-기능-만들기\"><a href=\"#1-로그인-페이지와-로그인-기능-만들기\" class=\"headerlink\" title=\"1. 로그인 페이지와 로그인 기능 만들기\"></a>1. 로그인 페이지와 로그인 기능 만들기</h2><ol>\n<li>아이디와 비밀번호를 입력할 수 있는 폼(Form)과 로그인 버튼 작성<ul>\n<li>sign-up.html 파일을 참고해서 만들어봅시다.</li>\n</ul>\n</li>\n<li>로그인 버튼을 클릭했을 때 동작하는 이벤트 핸들러를 작성합니다.</li>\n<li><code>UserService</code> 클래스에 <code>login(username, password)</code> 함수를 추가합니다.</li>\n<li><code>login</code> 함수에서 <code>signUp</code> 때와 동일한 <code>key</code>로 로컬 스토리지에서 사용자가 있는지 조회(<code>load</code>)합니다.<ol>\n<li>사용자가 없다면 예외를 발생합니다. (<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw\" target=\"_blank\" rel=\"noopener\">MDN throw 문서</a>)<ul>\n<li>userService.login 함수를 호출한 <code>login.html</code> 페이지에서 이 예외를 <code>try-catch</code> 구문으로 처리할 수 있도록 합니다.</li>\n<li>화면에 메시지로 에러 메시지를 보여주거나, <code>alert()</code> 함수를 이용하거나, 자유롭게 편한 방법으로 표현해 주세요.</li>\n</ul>\n</li>\n<li>로그인 username input에 입력한 사용자가 있다면 비밀번호가 동일한지 비교합니다.<ul>\n<li>비밀번호가 일치하지 않는다면 4.1.과 마찬가지로 예외를 발생시킵니다.</li>\n<li>비밀번호가 일치한다면 게시글 목록 페이지(<code>post-list.html</code>)로 이동합니다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-더-해보고-싶다면\"><a href=\"#2-더-해보고-싶다면\" class=\"headerlink\" title=\"2. 더 해보고 싶다면\"></a>2. 더 해보고 싶다면</h2><ol>\n<li><code>json-local-storage.js</code>는 LocalStorage를 사용하는 클래스 <code>JsonLocalStorage</code>가 작성되어 있습니다.<br> SessionStorage를 사용하는 <code>json-session-storage.js</code> 파일을 작성해 봅시다.</li>\n<li>“1. 로그인 페이지와 로그인 기능 만들기”의 4.2.에서 로그인 성공 시 SessionStorage에 로그인 정보(User)를 저장하고,<br> <code>UserService</code>의 <code>getLoggedInUser</code> 함수를 세션에 저장된 로그인 정보를 가져오도록 수정해 봅시다.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>오늘 스터디에서는 회원 가입 페이지를 만들고 <code>user-service.js</code> 파일 내의 <code>UserService</code> 클래스에 <code>signUp</code> 함수를 만들어 로컬 스토리지에 회원 정보를 저장하는 것까지 진행했습니다.</p>\n<p>회원 가입 후 로그인 페이지로 이동시키기 위해 비어있는 <code>login.html</code> 파일을 만들었는데, 아래와 같이 동작하도록 <code>login.html</code> 파일과 <code>user-service.js</code> 파일을 수정해 봅시다.</p>\n<h2 id=\"1-로그인-페이지와-로그인-기능-만들기\"><a href=\"#1-로그인-페이지와-로그인-기능-만들기\" class=\"headerlink\" title=\"1. 로그인 페이지와 로그인 기능 만들기\"></a>1. 로그인 페이지와 로그인 기능 만들기</h2><ol>\n<li>아이디와 비밀번호를 입력할 수 있는 폼(Form)과 로그인 버튼 작성<ul>\n<li>sign-up.html 파일을 참고해서 만들어봅시다.</li>\n</ul>\n</li>\n<li>로그인 버튼을 클릭했을 때 동작하는 이벤트 핸들러를 작성합니다.</li>\n<li><code>UserService</code> 클래스에 <code>login(username, password)</code> 함수를 추가합니다.</li>\n<li><code>login</code> 함수에서 <code>signUp</code> 때와 동일한 <code>key</code>로 로컬 스토리지에서 사용자가 있는지 조회(<code>load</code>)합니다.<ol>\n<li>사용자가 없다면 예외를 발생합니다. (<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw\" target=\"_blank\" rel=\"noopener\">MDN throw 문서</a>)<ul>\n<li>userService.login 함수를 호출한 <code>login.html</code> 페이지에서 이 예외를 <code>try-catch</code> 구문으로 처리할 수 있도록 합니다.</li>\n<li>화면에 메시지로 에러 메시지를 보여주거나, <code>alert()</code> 함수를 이용하거나, 자유롭게 편한 방법으로 표현해 주세요.</li>\n</ul>\n</li>\n<li>로그인 username input에 입력한 사용자가 있다면 비밀번호가 동일한지 비교합니다.<ul>\n<li>비밀번호가 일치하지 않는다면 4.1.과 마찬가지로 예외를 발생시킵니다.</li>\n<li>비밀번호가 일치한다면 게시글 목록 페이지(<code>post-list.html</code>)로 이동합니다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-더-해보고-싶다면\"><a href=\"#2-더-해보고-싶다면\" class=\"headerlink\" title=\"2. 더 해보고 싶다면\"></a>2. 더 해보고 싶다면</h2><ol>\n<li><code>json-local-storage.js</code>는 LocalStorage를 사용하는 클래스 <code>JsonLocalStorage</code>가 작성되어 있습니다.<br> SessionStorage를 사용하는 <code>json-session-storage.js</code> 파일을 작성해 봅시다.</li>\n<li>“1. 로그인 페이지와 로그인 기능 만들기”의 4.2.에서 로그인 성공 시 SessionStorage에 로그인 정보(User)를 저장하고,<br> <code>UserService</code>의 <code>getLoggedInUser</code> 함수를 세션에 저장된 로그인 정보를 가져오도록 수정해 봅시다.</li>\n</ol>\n"},{"title":"Javascript 호환성","_content":"","source":"_drafts/Javascript-호환성.md","raw":"---\ntitle: Javascript 호환성\ntags:\n---\n","slug":"Javascript-호환성","published":0,"date":"2019-11-18T13:03:41.454Z","updated":"2019-11-18T13:03:41.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxis00034359ekzgwpbl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"자바스크립트 모듈","_content":"","source":"_drafts/자바스크립트-모듈.md","raw":"---\ntitle: 자바스크립트 모듈\ntags:\n---\n","slug":"자바스크립트-모듈","published":0,"date":"2019-11-18T13:05:33.024Z","updated":"2019-11-18T13:05:33.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxiu000443592ct3h3vp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hexo 설치하기","date":"2019-11-17T09:01:10.000Z","_content":"Jekyll을 사용하려다가 [Hexo](https://hexo.io)를 사용해보기로 했다. [Jekyll Now](https://github.com/barryclark/jekyll-now)를 쓰면 조금 덜 번거롭겠지만, post 형식이 지킬과 헥소가 서로 다르지 않아서 post 파일들만 마이그레이션 하면 될 듯.\n\nHexo는 Javascript로 작성된 블로그 프레임워크이고, 설치는 `npm`으로 간단히 할 수 있다. (node와 npm 설치는 생략)\n\n```bash\n$ npm install -g hexo-cli\n```\n\nHexo 설치 후 `hexo` 명령으로 초기화하고, 파일을 생성, 테스트, 배포까지 할 수 있다.\n\n\n### Hexo 초기화\n`hexo init` 명령으로 초기화할 수 있는데, 디렉토리 이름을 넘겨주면 해당 디렉토리에 초기화를 하며, 전달하지 않는 경우 현재 디렉토리에 초기화한다.\n```bash\n$ hexo init [directory_name]\n$ cd directory_name # 디렉토리를 지정한 경우\n$ npm install # node 모듈을 설치\n```\n\n### Hexo 포스트 파일 만들기\nHexo의 레이아웃은 크게 page, post, draft로 구분이 되고, page는 독립된 페이지, post는 글, draft는 post의 드래프트 버전으로 노출되지 않고, `publish` 명령을 통해 source/_posts 폴더로 옮기게 된다.\npost는 `source/_posts` 폴더 하위에 위치하며, `generate` 시 정적 파일로 생성된다.\n```bash\n$ hexo new [layout] \"제목\" # scaffolds의 레이아웃을 활용하여 생성\n```\n직접 `source/posts` 폴더에 파일을 만들어도 무방하며, 아래 템플릿과 같이 입력하고, 제목과 파일명이 같도록 맞춰주면 된다.\n```\n---\ntitle: 제목\ndate: yyyy-MM-dd HH:mm:ss\n---\n내용\n```\n\n### 로컬에서 확인하기\n`hexo server` 명령을 통해 로컬 서버를 실행할 수 있으며, 기본적으로 4000번 포트를 통해 접속할 수 있다.\n```bash\n$ hexo server\n```\n위와 같이 실행한 후 브라우저를 실행하여 `localhost:4000`으로 접속하면 hexo로 생성된 블로그의 모습을 볼 수 있다. `source/posts` 폴더 내의 파일을 편집하면 파일의 상태를 실시간으로 추적하여 수정되는 내용을 브라우저에서 새로고침하여 바로 확인할 수 있다. (`hexo server` 명령을 재수행하지 않아도 된다.)","source":"_posts/Hexo-설치하기.md","raw":"---\ntitle: Hexo 설치하기\ndate: 2019-11-17 18:01:10\ntags:\ncategories:\n    - Hexo\n---\nJekyll을 사용하려다가 [Hexo](https://hexo.io)를 사용해보기로 했다. [Jekyll Now](https://github.com/barryclark/jekyll-now)를 쓰면 조금 덜 번거롭겠지만, post 형식이 지킬과 헥소가 서로 다르지 않아서 post 파일들만 마이그레이션 하면 될 듯.\n\nHexo는 Javascript로 작성된 블로그 프레임워크이고, 설치는 `npm`으로 간단히 할 수 있다. (node와 npm 설치는 생략)\n\n```bash\n$ npm install -g hexo-cli\n```\n\nHexo 설치 후 `hexo` 명령으로 초기화하고, 파일을 생성, 테스트, 배포까지 할 수 있다.\n\n\n### Hexo 초기화\n`hexo init` 명령으로 초기화할 수 있는데, 디렉토리 이름을 넘겨주면 해당 디렉토리에 초기화를 하며, 전달하지 않는 경우 현재 디렉토리에 초기화한다.\n```bash\n$ hexo init [directory_name]\n$ cd directory_name # 디렉토리를 지정한 경우\n$ npm install # node 모듈을 설치\n```\n\n### Hexo 포스트 파일 만들기\nHexo의 레이아웃은 크게 page, post, draft로 구분이 되고, page는 독립된 페이지, post는 글, draft는 post의 드래프트 버전으로 노출되지 않고, `publish` 명령을 통해 source/_posts 폴더로 옮기게 된다.\npost는 `source/_posts` 폴더 하위에 위치하며, `generate` 시 정적 파일로 생성된다.\n```bash\n$ hexo new [layout] \"제목\" # scaffolds의 레이아웃을 활용하여 생성\n```\n직접 `source/posts` 폴더에 파일을 만들어도 무방하며, 아래 템플릿과 같이 입력하고, 제목과 파일명이 같도록 맞춰주면 된다.\n```\n---\ntitle: 제목\ndate: yyyy-MM-dd HH:mm:ss\n---\n내용\n```\n\n### 로컬에서 확인하기\n`hexo server` 명령을 통해 로컬 서버를 실행할 수 있으며, 기본적으로 4000번 포트를 통해 접속할 수 있다.\n```bash\n$ hexo server\n```\n위와 같이 실행한 후 브라우저를 실행하여 `localhost:4000`으로 접속하면 hexo로 생성된 블로그의 모습을 볼 수 있다. `source/posts` 폴더 내의 파일을 편집하면 파일의 상태를 실시간으로 추적하여 수정되는 내용을 브라우저에서 새로고침하여 바로 확인할 수 있다. (`hexo server` 명령을 재수행하지 않아도 된다.)","slug":"Hexo-설치하기","published":1,"updated":"2019-11-17T10:01:29.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxiv00054359sxrouho5","content":"<p>Jekyll을 사용하려다가 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>를 사용해보기로 했다. <a href=\"https://github.com/barryclark/jekyll-now\" target=\"_blank\" rel=\"noopener\">Jekyll Now</a>를 쓰면 조금 덜 번거롭겠지만, post 형식이 지킬과 헥소가 서로 다르지 않아서 post 파일들만 마이그레이션 하면 될 듯.</p>\n<p>Hexo는 Javascript로 작성된 블로그 프레임워크이고, 설치는 <code>npm</code>으로 간단히 할 수 있다. (node와 npm 설치는 생략)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>Hexo 설치 후 <code>hexo</code> 명령으로 초기화하고, 파일을 생성, 테스트, 배포까지 할 수 있다.</p>\n<h3 id=\"Hexo-초기화\"><a href=\"#Hexo-초기화\" class=\"headerlink\" title=\"Hexo 초기화\"></a>Hexo 초기화</h3><p><code>hexo init</code> 명령으로 초기화할 수 있는데, 디렉토리 이름을 넘겨주면 해당 디렉토리에 초기화를 하며, 전달하지 않는 경우 현재 디렉토리에 초기화한다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [directory_name]</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> directory_name <span class=\"comment\"># 디렉토리를 지정한 경우</span></span><br><span class=\"line\">$ npm install <span class=\"comment\"># node 모듈을 설치</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Hexo-포스트-파일-만들기\"><a href=\"#Hexo-포스트-파일-만들기\" class=\"headerlink\" title=\"Hexo 포스트 파일 만들기\"></a>Hexo 포스트 파일 만들기</h3><p>Hexo의 레이아웃은 크게 page, post, draft로 구분이 되고, page는 독립된 페이지, post는 글, draft는 post의 드래프트 버전으로 노출되지 않고, <code>publish</code> 명령을 통해 source/_posts 폴더로 옮기게 된다.<br>post는 <code>source/_posts</code> 폴더 하위에 위치하며, <code>generate</code> 시 정적 파일로 생성된다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] <span class=\"string\">\"제목\"</span> <span class=\"comment\"># scaffolds의 레이아웃을 활용하여 생성</span></span><br></pre></td></tr></table></figure></p>\n<p>직접 <code>source/posts</code> 폴더에 파일을 만들어도 무방하며, 아래 템플릿과 같이 입력하고, 제목과 파일명이 같도록 맞춰주면 된다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 제목</span><br><span class=\"line\">date: yyyy-MM-dd HH:mm:ss</span><br><span class=\"line\">---</span><br><span class=\"line\">내용</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"로컬에서-확인하기\"><a href=\"#로컬에서-확인하기\" class=\"headerlink\" title=\"로컬에서 확인하기\"></a>로컬에서 확인하기</h3><p><code>hexo server</code> 명령을 통해 로컬 서버를 실행할 수 있으며, 기본적으로 4000번 포트를 통해 접속할 수 있다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>위와 같이 실행한 후 브라우저를 실행하여 <code>localhost:4000</code>으로 접속하면 hexo로 생성된 블로그의 모습을 볼 수 있다. <code>source/posts</code> 폴더 내의 파일을 편집하면 파일의 상태를 실시간으로 추적하여 수정되는 내용을 브라우저에서 새로고침하여 바로 확인할 수 있다. (<code>hexo server</code> 명령을 재수행하지 않아도 된다.)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Jekyll을 사용하려다가 <a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">Hexo</a>를 사용해보기로 했다. <a href=\"https://github.com/barryclark/jekyll-now\" target=\"_blank\" rel=\"noopener\">Jekyll Now</a>를 쓰면 조금 덜 번거롭겠지만, post 형식이 지킬과 헥소가 서로 다르지 않아서 post 파일들만 마이그레이션 하면 될 듯.</p>\n<p>Hexo는 Javascript로 작성된 블로그 프레임워크이고, 설치는 <code>npm</code>으로 간단히 할 수 있다. (node와 npm 설치는 생략)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>Hexo 설치 후 <code>hexo</code> 명령으로 초기화하고, 파일을 생성, 테스트, 배포까지 할 수 있다.</p>\n<h3 id=\"Hexo-초기화\"><a href=\"#Hexo-초기화\" class=\"headerlink\" title=\"Hexo 초기화\"></a>Hexo 초기화</h3><p><code>hexo init</code> 명령으로 초기화할 수 있는데, 디렉토리 이름을 넘겨주면 해당 디렉토리에 초기화를 하며, 전달하지 않는 경우 현재 디렉토리에 초기화한다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init [directory_name]</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> directory_name <span class=\"comment\"># 디렉토리를 지정한 경우</span></span><br><span class=\"line\">$ npm install <span class=\"comment\"># node 모듈을 설치</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Hexo-포스트-파일-만들기\"><a href=\"#Hexo-포스트-파일-만들기\" class=\"headerlink\" title=\"Hexo 포스트 파일 만들기\"></a>Hexo 포스트 파일 만들기</h3><p>Hexo의 레이아웃은 크게 page, post, draft로 구분이 되고, page는 독립된 페이지, post는 글, draft는 post의 드래프트 버전으로 노출되지 않고, <code>publish</code> 명령을 통해 source/_posts 폴더로 옮기게 된다.<br>post는 <code>source/_posts</code> 폴더 하위에 위치하며, <code>generate</code> 시 정적 파일로 생성된다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] <span class=\"string\">\"제목\"</span> <span class=\"comment\"># scaffolds의 레이아웃을 활용하여 생성</span></span><br></pre></td></tr></table></figure></p>\n<p>직접 <code>source/posts</code> 폴더에 파일을 만들어도 무방하며, 아래 템플릿과 같이 입력하고, 제목과 파일명이 같도록 맞춰주면 된다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 제목</span><br><span class=\"line\">date: yyyy-MM-dd HH:mm:ss</span><br><span class=\"line\">---</span><br><span class=\"line\">내용</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"로컬에서-확인하기\"><a href=\"#로컬에서-확인하기\" class=\"headerlink\" title=\"로컬에서 확인하기\"></a>로컬에서 확인하기</h3><p><code>hexo server</code> 명령을 통해 로컬 서버를 실행할 수 있으며, 기본적으로 4000번 포트를 통해 접속할 수 있다.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>위와 같이 실행한 후 브라우저를 실행하여 <code>localhost:4000</code>으로 접속하면 hexo로 생성된 블로그의 모습을 볼 수 있다. <code>source/posts</code> 폴더 내의 파일을 편집하면 파일의 상태를 실시간으로 추적하여 수정되는 내용을 브라우저에서 새로고침하여 바로 확인할 수 있다. (<code>hexo server</code> 명령을 재수행하지 않아도 된다.)</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-11-17T08:58:23.407Z","updated":"2019-11-17T08:58:23.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxiy00074359q9auj1ly","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Node로 로컬 서버 실행하기","date":"2019-11-17T09:38:58.000Z","_content":"로컬에 있는 HTML 파일을 브라우저로 열면 `file:///Users/gardenist/workspace/cmax-study/index.html` 과 같이 `http`가 아닌 `file` 프로토콜로 잡히고, `github.com`과 같은 호스트를 표현할 수 없다. 이 경우 `/ets/hosts` 파일을 이용해 도메인을 부여한 것처럼 브라우저에 접근할 수 없는데,\n단순 `html` 파일 작업이라면 무방하지만 Ajax 통신이 필요한 경우 서버에서 모든 Origin에 대해 Ajax를 허용(Allow)하지 않는 이상 테스트할 방법이 없다.\n\n이를 위해 로컬의 파일을 localhost로 접속하기 위해 `node`의 `http-server` 모듈을 활용한다.\n\n\n```bash\n$ npm install -g http-server\n```\n\n위와 같이 `http-server`를 설치한 후 html 파일을 서빙할 디렉토리, 즉 html 파일이 위치한 곳으로 이동한 후 `http-server`를 입력하여 실행해준 후 브라우저에서 `localhost:8080`으로 접속한다.\n\n```bash\n$ cd <html파일이 있는 폴더>\n$ http-server\n```\n\n![](https://user-images.githubusercontent.com/54785476/69005835-cab0f700-096a-11ea-93fa-94fdbb9f2f92.png)\n(해당 폴더의 파일 목록이 표시되는 것을 확인할 수 있다. 아무런 필터링 없이 접근이 가능하므로 당연히 테스트 용으로만 사용해야 하고, 실 운영을 위해서 사용할 때는 보안 관련 설정이 추가되어야 한다.)\n\n`http-server --help`를 실행하면 실행 옵션에 대한 설명을 볼 수 있다.\n```\nusage: http-server [path] [options]\n\noptions:\n  -p           Port to use [8080]\n  -a           Address to use [0.0.0.0]\n  -d           Show directory listings [true]\n  -i           Display autoIndex [true]\n  -g --gzip    Serve gzip files when possible [false]\n  -e --ext     Default file extension if none supplied [none]\n  -s --silent  Suppress log messages from output\n  --cors[=headers]   Enable CORS via the \"Access-Control-Allow-Origin\" header\n                     Optionally provide CORS headers list separated by commas\n  -o [path]    Open browser window after starting the server\n  -c           Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.\n               To disable caching, use -c-1.\n  -U --utc     Use UTC time format in log messages.\n\n  -P --proxy   Fallback proxy if the request cannot be resolved. e.g.: http://someurl.com\n\n  -S --ssl     Enable https.\n  -C --cert    Path to ssl cert file (default: cert.pem).\n  -K --key     Path to ssl key file (default: key.pem).\n\n  -r --robots  Respond to /robots.txt [User-agent: *\\nDisallow: /]\n  --no-dotfiles  Do not show dotfiles\n  -h --help    Print this list and exit.\n```\n\n기본 포트는 8080 포트지만, `-p` 옵션을 줘서 `http-server -p 4000`과 같이 입력하면 `localhost:4000`으로 접속할 수 있다.","source":"_posts/Node로-로컬-서버-실행하기.md","raw":"---\ntitle: Node로 로컬 서버 실행하기\ndate: 2019-11-17 18:38:58\ntags:\ncategories:\n    - Javascript\n    - Node.js\n---\n로컬에 있는 HTML 파일을 브라우저로 열면 `file:///Users/gardenist/workspace/cmax-study/index.html` 과 같이 `http`가 아닌 `file` 프로토콜로 잡히고, `github.com`과 같은 호스트를 표현할 수 없다. 이 경우 `/ets/hosts` 파일을 이용해 도메인을 부여한 것처럼 브라우저에 접근할 수 없는데,\n단순 `html` 파일 작업이라면 무방하지만 Ajax 통신이 필요한 경우 서버에서 모든 Origin에 대해 Ajax를 허용(Allow)하지 않는 이상 테스트할 방법이 없다.\n\n이를 위해 로컬의 파일을 localhost로 접속하기 위해 `node`의 `http-server` 모듈을 활용한다.\n\n\n```bash\n$ npm install -g http-server\n```\n\n위와 같이 `http-server`를 설치한 후 html 파일을 서빙할 디렉토리, 즉 html 파일이 위치한 곳으로 이동한 후 `http-server`를 입력하여 실행해준 후 브라우저에서 `localhost:8080`으로 접속한다.\n\n```bash\n$ cd <html파일이 있는 폴더>\n$ http-server\n```\n\n![](https://user-images.githubusercontent.com/54785476/69005835-cab0f700-096a-11ea-93fa-94fdbb9f2f92.png)\n(해당 폴더의 파일 목록이 표시되는 것을 확인할 수 있다. 아무런 필터링 없이 접근이 가능하므로 당연히 테스트 용으로만 사용해야 하고, 실 운영을 위해서 사용할 때는 보안 관련 설정이 추가되어야 한다.)\n\n`http-server --help`를 실행하면 실행 옵션에 대한 설명을 볼 수 있다.\n```\nusage: http-server [path] [options]\n\noptions:\n  -p           Port to use [8080]\n  -a           Address to use [0.0.0.0]\n  -d           Show directory listings [true]\n  -i           Display autoIndex [true]\n  -g --gzip    Serve gzip files when possible [false]\n  -e --ext     Default file extension if none supplied [none]\n  -s --silent  Suppress log messages from output\n  --cors[=headers]   Enable CORS via the \"Access-Control-Allow-Origin\" header\n                     Optionally provide CORS headers list separated by commas\n  -o [path]    Open browser window after starting the server\n  -c           Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.\n               To disable caching, use -c-1.\n  -U --utc     Use UTC time format in log messages.\n\n  -P --proxy   Fallback proxy if the request cannot be resolved. e.g.: http://someurl.com\n\n  -S --ssl     Enable https.\n  -C --cert    Path to ssl cert file (default: cert.pem).\n  -K --key     Path to ssl key file (default: key.pem).\n\n  -r --robots  Respond to /robots.txt [User-agent: *\\nDisallow: /]\n  --no-dotfiles  Do not show dotfiles\n  -h --help    Print this list and exit.\n```\n\n기본 포트는 8080 포트지만, `-p` 옵션을 줘서 `http-server -p 4000`과 같이 입력하면 `localhost:4000`으로 접속할 수 있다.","slug":"Node로-로컬-서버-실행하기","published":1,"updated":"2019-11-17T10:01:24.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxj100084359t8pqu2yc","content":"<p>로컬에 있는 HTML 파일을 브라우저로 열면 <code>file:///Users/gardenist/workspace/cmax-study/index.html</code> 과 같이 <code>http</code>가 아닌 <code>file</code> 프로토콜로 잡히고, <code>github.com</code>과 같은 호스트를 표현할 수 없다. 이 경우 <code>/ets/hosts</code> 파일을 이용해 도메인을 부여한 것처럼 브라우저에 접근할 수 없는데,<br>단순 <code>html</code> 파일 작업이라면 무방하지만 Ajax 통신이 필요한 경우 서버에서 모든 Origin에 대해 Ajax를 허용(Allow)하지 않는 이상 테스트할 방법이 없다.</p>\n<p>이를 위해 로컬의 파일을 localhost로 접속하기 위해 <code>node</code>의 <code>http-server</code> 모듈을 활용한다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g http-server</span><br></pre></td></tr></table></figure>\n<p>위와 같이 <code>http-server</code>를 설치한 후 html 파일을 서빙할 디렉토리, 즉 html 파일이 위치한 곳으로 이동한 후 <code>http-server</code>를 입력하여 실행해준 후 브라우저에서 <code>localhost:8080</code>으로 접속한다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;html파일이 있는 폴더&gt;</span><br><span class=\"line\">$ http-server</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/54785476/69005835-cab0f700-096a-11ea-93fa-94fdbb9f2f92.png\" alt><br>(해당 폴더의 파일 목록이 표시되는 것을 확인할 수 있다. 아무런 필터링 없이 접근이 가능하므로 당연히 테스트 용으로만 사용해야 하고, 실 운영을 위해서 사용할 때는 보안 관련 설정이 추가되어야 한다.)</p>\n<p><code>http-server --help</code>를 실행하면 실행 옵션에 대한 설명을 볼 수 있다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: http-server [path] [options]</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -p           Port to use [8080]</span><br><span class=\"line\">  -a           Address to use [0.0.0.0]</span><br><span class=\"line\">  -d           Show directory listings [true]</span><br><span class=\"line\">  -i           Display autoIndex [true]</span><br><span class=\"line\">  -g --gzip    Serve gzip files when possible [false]</span><br><span class=\"line\">  -e --ext     Default file extension if none supplied [none]</span><br><span class=\"line\">  -s --silent  Suppress log messages from output</span><br><span class=\"line\">  --cors[=headers]   Enable CORS via the &quot;Access-Control-Allow-Origin&quot; header</span><br><span class=\"line\">                     Optionally provide CORS headers list separated by commas</span><br><span class=\"line\">  -o [path]    Open browser window after starting the server</span><br><span class=\"line\">  -c           Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.</span><br><span class=\"line\">               To disable caching, use -c-1.</span><br><span class=\"line\">  -U --utc     Use UTC time format in log messages.</span><br><span class=\"line\"></span><br><span class=\"line\">  -P --proxy   Fallback proxy if the request cannot be resolved. e.g.: http://someurl.com</span><br><span class=\"line\"></span><br><span class=\"line\">  -S --ssl     Enable https.</span><br><span class=\"line\">  -C --cert    Path to ssl cert file (default: cert.pem).</span><br><span class=\"line\">  -K --key     Path to ssl key file (default: key.pem).</span><br><span class=\"line\"></span><br><span class=\"line\">  -r --robots  Respond to /robots.txt [User-agent: *\\nDisallow: /]</span><br><span class=\"line\">  --no-dotfiles  Do not show dotfiles</span><br><span class=\"line\">  -h --help    Print this list and exit.</span><br></pre></td></tr></table></figure></p>\n<p>기본 포트는 8080 포트지만, <code>-p</code> 옵션을 줘서 <code>http-server -p 4000</code>과 같이 입력하면 <code>localhost:4000</code>으로 접속할 수 있다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>로컬에 있는 HTML 파일을 브라우저로 열면 <code>file:///Users/gardenist/workspace/cmax-study/index.html</code> 과 같이 <code>http</code>가 아닌 <code>file</code> 프로토콜로 잡히고, <code>github.com</code>과 같은 호스트를 표현할 수 없다. 이 경우 <code>/ets/hosts</code> 파일을 이용해 도메인을 부여한 것처럼 브라우저에 접근할 수 없는데,<br>단순 <code>html</code> 파일 작업이라면 무방하지만 Ajax 통신이 필요한 경우 서버에서 모든 Origin에 대해 Ajax를 허용(Allow)하지 않는 이상 테스트할 방법이 없다.</p>\n<p>이를 위해 로컬의 파일을 localhost로 접속하기 위해 <code>node</code>의 <code>http-server</code> 모듈을 활용한다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g http-server</span><br></pre></td></tr></table></figure>\n<p>위와 같이 <code>http-server</code>를 설치한 후 html 파일을 서빙할 디렉토리, 즉 html 파일이 위치한 곳으로 이동한 후 <code>http-server</code>를 입력하여 실행해준 후 브라우저에서 <code>localhost:8080</code>으로 접속한다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;html파일이 있는 폴더&gt;</span><br><span class=\"line\">$ http-server</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-images.githubusercontent.com/54785476/69005835-cab0f700-096a-11ea-93fa-94fdbb9f2f92.png\" alt><br>(해당 폴더의 파일 목록이 표시되는 것을 확인할 수 있다. 아무런 필터링 없이 접근이 가능하므로 당연히 테스트 용으로만 사용해야 하고, 실 운영을 위해서 사용할 때는 보안 관련 설정이 추가되어야 한다.)</p>\n<p><code>http-server --help</code>를 실행하면 실행 옵션에 대한 설명을 볼 수 있다.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: http-server [path] [options]</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -p           Port to use [8080]</span><br><span class=\"line\">  -a           Address to use [0.0.0.0]</span><br><span class=\"line\">  -d           Show directory listings [true]</span><br><span class=\"line\">  -i           Display autoIndex [true]</span><br><span class=\"line\">  -g --gzip    Serve gzip files when possible [false]</span><br><span class=\"line\">  -e --ext     Default file extension if none supplied [none]</span><br><span class=\"line\">  -s --silent  Suppress log messages from output</span><br><span class=\"line\">  --cors[=headers]   Enable CORS via the &quot;Access-Control-Allow-Origin&quot; header</span><br><span class=\"line\">                     Optionally provide CORS headers list separated by commas</span><br><span class=\"line\">  -o [path]    Open browser window after starting the server</span><br><span class=\"line\">  -c           Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.</span><br><span class=\"line\">               To disable caching, use -c-1.</span><br><span class=\"line\">  -U --utc     Use UTC time format in log messages.</span><br><span class=\"line\"></span><br><span class=\"line\">  -P --proxy   Fallback proxy if the request cannot be resolved. e.g.: http://someurl.com</span><br><span class=\"line\"></span><br><span class=\"line\">  -S --ssl     Enable https.</span><br><span class=\"line\">  -C --cert    Path to ssl cert file (default: cert.pem).</span><br><span class=\"line\">  -K --key     Path to ssl key file (default: key.pem).</span><br><span class=\"line\"></span><br><span class=\"line\">  -r --robots  Respond to /robots.txt [User-agent: *\\nDisallow: /]</span><br><span class=\"line\">  --no-dotfiles  Do not show dotfiles</span><br><span class=\"line\">  -h --help    Print this list and exit.</span><br></pre></td></tr></table></figure></p>\n<p>기본 포트는 8080 포트지만, <code>-p</code> 옵션을 줘서 <code>http-server -p 4000</code>과 같이 입력하면 <code>localhost:4000</code>으로 접속할 수 있다.</p>\n"},{"title":"Node 설치하기","date":"2019-11-17T09:53:54.000Z","_content":"\n```bash\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh\n$ nvm install node\n```","source":"_posts/Node-설치하기.md","raw":"---\ntitle: Node 설치하기\ndate: 2019-11-17 18:53:54\ntags:\ncategories:\n    - Javascript\n    - Node.js\n---\n\n```bash\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh\n$ nvm install node\n```","slug":"Node-설치하기","published":1,"updated":"2019-11-17T10:01:07.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck34guxj3000a43594j85gjo9","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh</span><br><span class=\"line\">$ nvm install node</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh</span><br><span class=\"line\">$ nvm install node</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck34guxii000043598ng7eurs","category_id":"ck34guxiq00024359m7g2b2u2","_id":"ck34guxj6000c4359vx8x91w2"},{"post_id":"ck34guxii000043598ng7eurs","category_id":"ck34guxj200094359h7xrfr43","_id":"ck34guxj7000e4359d67y5mbi"},{"post_id":"ck34guxiv00054359sxrouho5","category_id":"ck34guxj5000b4359niuyhcit","_id":"ck34guxj7000f4359j2ilu2uh"},{"post_id":"ck34guxin00014359y7xl45f1","category_id":"ck34guxix000643596tnyweyb","_id":"ck34guxj8000h4359xbl0sc40"},{"post_id":"ck34guxin00014359y7xl45f1","category_id":"ck34guxj6000d4359mwlpm6e9","_id":"ck34guxja000j43599hsyvurh"},{"post_id":"ck34guxj100084359t8pqu2yc","category_id":"ck34guxiq00024359m7g2b2u2","_id":"ck34guxjb000k4359pwdrwvfa"},{"post_id":"ck34guxj100084359t8pqu2yc","category_id":"ck34guxj7000g4359txhq3cs3","_id":"ck34guxjb000l43591dn7afiz"},{"post_id":"ck34guxj3000a43594j85gjo9","category_id":"ck34guxiq00024359m7g2b2u2","_id":"ck34guxjb000m4359xptyeuoz"},{"post_id":"ck34guxj3000a43594j85gjo9","category_id":"ck34guxj7000g4359txhq3cs3","_id":"ck34guxjb000n4359vtwa6aik"}],"PostTag":[],"Tag":[]}}